class CSP:
    
    def __init__(self,line):
    
        self.N = int(line[0])
        self.D = int(line[1])
        self.bound = {'M':int(line[2]),'A': int(line[3]),'E': int(line[4]), 'R': self.N - int(line[2]) -int(line[3])-int(line[4])}

        if(len(line) == 5):
            self.type = 1
        else:
            self.type = 2
            self.S = int(line[5])
            self.T = int(line[6])

        self.nextNurse =  1
        self.nextDay = 1
        self.next = 1

        self.assignment = {}

        self.count = {}
        for i in range(1,self.D+1):
            self.count[i] = {'A':0,'E':0,'M':0,'R':0,'nurse':0}
        self.assigned = 0

    def checkRest(self,value,day):
        if(value != 'R'):
            rem = (day)%7
            if(rem!=0):
                l,u = day - rem + 1, day - rem + 8
            else:
                l,u = day - 6, day
            satisfy = False
            for i in range(l,u):
                if(i!= day and (self.assignment.get(self.nextNurse) ==None or self.assignment[self.nextNurse].get(i) == None or self.assignment[self.nextNurse][i]=='R')):
                    satisfy = True
                    break
            if (not satisfy):
                return False
        return True

    def sanity(self):
        count = {'M':[0]*self.D,'A':[0]*self.D,'E':[0]*self.D,'R':[0]*self.D}
        d = self.assignment
        for nurse in d:
            print(d[nurse])
            for day in d[nurse]:
                if(day < self.D and ( d[nurse][day] == d[nurse][day+1] == 'M' or (d[nurse][day] == 'E' and d[nurse][day+1] == 'M'))):
                    print('NURSE',nurse,' EM/MM AT',day)
                    return
                val=d[nurse][day]
                count[val][day-1] += 1
        for i in count:
            for j in count[i]:
                if(i != 'R' and j != self.bound[i]):
                    print('DAY',i,'NOT MATCHING AT',j)
                    return

        for nurse in d:
            got = False
            day = 1
            while(day <= self.D):
                if(d[nurse][day]  == 'R'):
                    got = True
                if(day%7==0):
                    if(not got):
                        print('NURSE',nurse,'NO REST',day)
                        return 
                    got = False
                day +=1

        print('SANITY MATCHED')


# bound = {'M':3,'A': 3,'E': 3, 'R': 1}        
# pos = list(map(int,input().split()))

# count = {}
# for i in range(1,11):
#     count[i] = {'A':0,'E':0,'M':0,'R':0,'nurse':0}

# d = 
    
# for nurse in d:
#     for day in d[nurse]:
#         val=d[nurse][day]
#         if(val):
#             count[day][val] += 1
# prob = []
# for i in bound:
#     prob.append([count[pos[1]][i]/bound[i],i])

# prob.sort()
# out=[]
# for i in prob:
#     out.append(i[1])
# print(out)

# d =  {
#     1:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'A', 7: 'M', 8: 'A'},
#     2:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'E', 7: 'R', 8: 'M'},
#     3:{1: 'E', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'R', 7: 'E', 8: 'E'},
#     4:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'M', 7: 'A', 8: 'R'}
# }

# # n = int(input())
# conv = []
# pos = {'R':[],'E':[],'A':[],'M':[]}
# for i in range(1,5):
#     pos[d[i][1]].append(i)
# for i in range(1,5):
#     conv.append(pos[d[i][8]].pop())
# n = int(input())
# for i in range(9,n+1):
#     for j in range(1,5):
#         d[j][i] = d[conv[j-1]][i-7]

# c=CSP([4,n,1,1,1])
# c.assignment = d
# c.N = 5
# c.sanity()

a={
1:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
2:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
3:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
4:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
5:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
6:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
7:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
8:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
9:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
10:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
11:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
12:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
13:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
14:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
15:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
16:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
17:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
18:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
19:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
20:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
21:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
22:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
23:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
24:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
25:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
26:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
27:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
28:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
29:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
30:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'}
}
b = {
1:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
2:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
3:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
4:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
5:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'E', 8: 'A', 9: 'R', 10: 'A', 11: 'R', 12: 'A', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'E'},
6:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
7:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
8:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
9:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
10:{1: 'R', 2: 'M', 3: 'R', 4: 'M', 5: 'R', 6: 'M', 7: 'A', 8: 'E', 9: 'R', 10: 'M', 11: 'R', 12: 'M', 13: 'R', 14: 'M', 15: 'R', 16: 'M', 17: 'R', 18: 'M', 19: 'R', 20: 'M', 21: 'A'},
11:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
12:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
13:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
14:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
15:{1: 'M', 2: 'A', 3: 'M', 4: 'A', 5: 'M', 6: 'A', 7: 'R', 8: 'M', 9: 'E', 10: 'E', 11: 'E', 12: 'E', 13: 'E', 14: 'R', 15: 'M', 16: 'A', 17: 'M', 18: 'A', 19: 'M', 20: 'A', 21: 'R'},
16:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
17:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
18:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
19:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
20:{1: 'M', 2: 'E', 3: 'E', 4: 'E', 5: 'E', 6: 'E', 7: 'R', 8: 'M', 9: 'A', 10: 'M', 11: 'A', 12: 'M', 13: 'A', 14: 'R', 15: 'M', 16: 'E', 17: 'E', 18: 'E', 19: 'E', 20: 'E', 21: 'R'},
21:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
22:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
23:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
24:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
25:{1: 'E', 2: 'R', 3: 'M', 4: 'R', 5: 'M', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'A', 15: 'E', 16: 'R', 17: 'M', 18: 'R', 19: 'M', 20: 'R', 21: 'M'},
26:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
27:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
28:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
29:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'},
30:{1: 'A', 2: 'R', 3: 'A', 4: 'R', 5: 'A', 6: 'R', 7: 'M', 8: 'R', 9: 'M', 10: 'R', 11: 'M', 12: 'R', 13: 'M', 14: 'E', 15: 'A', 16: 'R', 17: 'A', 18: 'R', 19: 'A', 20: 'R', 21: 'M'}
}

for i in a:
    for j in a[i]:
        if(a[i][j] != b[i][j]):
            print('NO',i,j)
            
print('YES')

